<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bioops]]></title>
  <link href="http://bioops.info/atom.xml" rel="self"/>
  <link href="http://bioops.info/"/>
  <updated>2016-06-28T17:00:47+00:00</updated>
  <id>http://bioops.info/</id>
  <author>
    <name><![CDATA[Bioops]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Demo of Classification]]></title>
    <link href="http://bioops.info/2015/02/demo-of-classification/"/>
    <updated>2015-02-24T17:35:23+00:00</updated>
    <id>http://bioops.info/2015/02/demo-of-classification</id>
    <content type="html"><![CDATA[<p>R code demo of</p>

<ol>
  <li>Linear discriminant analysis (LDA)</li>
  <li>Quadratic discriminant analysis (QDA)</li>
  <li>k-nearest neighbor (KNN)</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1"># read data</span>
</span><span class="line"><span class="kn">library</span><span class="p">(</span>RCurl<span class="p">)</span>
</span><span class="line">data <span class="o">&lt;-</span> getURL<span class="p">(</span><span class="s">&quot;https://raw.githubusercontent.com/bioops/mis_scripts/master/statistics/data/admission.txt&quot;</span><span class="p">)</span>
</span><span class="line">admission<span class="o">&lt;-</span>read.table<span class="p">(</span>text<span class="o">=</span>data<span class="p">,</span>header<span class="o">=</span><span class="bp">T</span><span class="p">)</span>
</span><span class="line">admission<span class="o">$</span>CLASS<span class="o">&lt;-</span><span class="kp">as.factor</span><span class="p">(</span>admission<span class="o">$</span>CLASS<span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># scale the data</span>
</span><span class="line">admission<span class="o">$</span>GMAT<span class="o">&lt;-</span><span class="kp">scale</span><span class="p">(</span>admission<span class="o">$</span>GMAT<span class="p">)</span>
</span><span class="line">admission<span class="o">$</span>GPA<span class="o">&lt;-</span><span class="kp">scale</span><span class="p">(</span>admission<span class="o">$</span>GPA<span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># (1) LDA</span>
</span><span class="line"><span class="kn">library</span><span class="p">(</span>MASS<span class="p">)</span>
</span><span class="line">lda.fit<span class="o">&lt;-</span>lda<span class="p">(</span>CLASS<span class="o">~</span>GMAT<span class="o">+</span>GPA<span class="p">,</span>data<span class="o">=</span>admission<span class="p">)</span>
</span><span class="line">lda.pred<span class="o">&lt;-</span>predict<span class="p">(</span>lda.fit<span class="p">)</span>
</span><span class="line"><span class="c1"># plot</span>
</span><span class="line"><span class="c1"># different symbols represents true classifications</span>
</span><span class="line"><span class="c1"># different colors are predicted classifications</span>
</span><span class="line">plot<span class="p">(</span>admission<span class="p">[,</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">],</span>col<span class="o">=</span>lda.pred<span class="o">$</span><span class="kp">class</span><span class="p">,</span> pch<span class="o">=</span><span class="kp">as.numeric</span><span class="p">(</span>admission<span class="o">$</span>CLASS<span class="p">),</span>
</span><span class="line">     xlab<span class="o">=</span><span class="s">&quot;GPA&quot;</span><span class="p">,</span>ylab<span class="o">=</span><span class="s">&quot;GMAT&quot;</span><span class="p">,</span>main<span class="o">=</span><span class="s">&quot;LDA&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://bioops.info/images/uploads/2015/class1.png" alt="LDA" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1"># (2) QDA</span>
</span><span class="line">qda.fit<span class="o">&lt;-</span>qda<span class="p">(</span>CLASS<span class="o">~</span>GMAT<span class="o">+</span>GPA<span class="p">,</span>data<span class="o">=</span>admission<span class="p">)</span>
</span><span class="line">qda.pred<span class="o">&lt;-</span>predict<span class="p">(</span>qda.fit<span class="p">)</span>
</span><span class="line"><span class="c1"># plot</span>
</span><span class="line"><span class="c1"># different symbols represents true classifications</span>
</span><span class="line"><span class="c1"># different colors are predicted classifications</span>
</span><span class="line">plot<span class="p">(</span>admission<span class="p">[,</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">],</span>col<span class="o">=</span>qda.pred<span class="o">$</span><span class="kp">class</span><span class="p">,</span> pch<span class="o">=</span><span class="kp">as.numeric</span><span class="p">(</span>admission<span class="o">$</span>CLASS<span class="p">),</span>
</span><span class="line">     xlab<span class="o">=</span><span class="s">&quot;GPA&quot;</span><span class="p">,</span>ylab<span class="o">=</span><span class="s">&quot;GMAT&quot;</span><span class="p">,</span>main<span class="o">=</span><span class="s">&quot;QDA&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://bioops.info/images/uploads/2015/class2.png" alt="QDA" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="kn">library</span><span class="p">(</span><span class="kp">class</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># tune parameter using cross-validation (CV)</span>
</span><span class="line">k<span class="o">&lt;-</span><span class="kp">seq</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">15</span><span class="p">,</span><span class="m">1</span><span class="p">)</span> <span class="c1"># different k</span>
</span><span class="line">cv.err<span class="o">&lt;-</span><span class="kc">NULL</span> <span class="c1"># cv error</span>
</span><span class="line"><span class="kr">for</span> <span class="p">(</span>ki <span class="kr">in</span> k<span class="p">){</span>
</span><span class="line">  knn.pred.cv<span class="o">&lt;-</span>knn.cv<span class="p">(</span>admission<span class="p">[,</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">],</span>admission<span class="p">[,</span><span class="m">3</span><span class="p">],</span>k<span class="o">=</span>ki<span class="p">)</span>
</span><span class="line">  cv.err<span class="o">&lt;-</span><span class="kt">c</span><span class="p">(</span>cv.err<span class="p">,</span> <span class="kp">mean</span><span class="p">(</span>knn.pred.cv<span class="o">!=</span>admission<span class="p">[,</span><span class="m">3</span><span class="p">]))</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">plot<span class="p">(</span>k<span class="p">,</span>cv.err<span class="p">,</span> main<span class="o">=</span><span class="s">&quot;CV error vs k&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># using the optimal parameter</span>
</span><span class="line">knn.pred<span class="o">&lt;-</span>knn<span class="p">(</span>admission<span class="p">[,</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">],</span>admission<span class="p">[,</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">],</span> admission<span class="p">[,</span><span class="m">3</span><span class="p">],</span>k<span class="o">=</span>k<span class="p">[</span><span class="kp">which.min</span><span class="p">(</span>cv.err<span class="p">)])</span>
</span><span class="line">
</span><span class="line"><span class="c1"># plot</span>
</span><span class="line"><span class="c1"># different symbols represents true classifications</span>
</span><span class="line"><span class="c1"># different colors are predicted classifications</span>
</span><span class="line">plot<span class="p">(</span>admission<span class="p">[,</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">],</span>col<span class="o">=</span>knn.pred<span class="p">,</span> pch<span class="o">=</span><span class="kp">as.numeric</span><span class="p">(</span>admission<span class="o">$</span>CLASS<span class="p">),</span>
</span><span class="line">     xlab<span class="o">=</span><span class="s">&quot;GPA&quot;</span><span class="p">,</span>ylab<span class="o">=</span><span class="s">&quot;GMAT&quot;</span><span class="p">,</span>main<span class="o">=</span><span class="s">&quot;KNN&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://bioops.info/images/uploads/2015/class3.png" alt="KNN" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving Bridge Regression Using Local Quadratic Approximation (LQA)]]></title>
    <link href="http://bioops.info/2015/02/solving-bridge-regression-using-local-quadratic-approximation-lqa/"/>
    <updated>2015-02-24T16:27:50+00:00</updated>
    <id>http://bioops.info/2015/02/solving-bridge-regression-using-local-quadratic-approximation-lqa</id>
    <content type="html"><![CDATA[<p>Bridge regression is a broad class of penalized regression, and can be used in high-dimensional regression problems.</p>

<p>It includes the ridge (q=2) and lasso (q  =1) as special cases.</p>

<p>More technical details can be found <a href="http://www.sciencedirect.com/science/article/pii/S0378375811001960">here</a>. Below R code demonstrates:</p>

<ol>
  <li>sovling bridge regression using local quadratic approximation (LQA) and Newton–Raphson algorithm.</li>
  <li>simulation of tuning parameters using 50/50/200 observations (training/validation/testing).</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1"># The function to solve bridge regression</span>
</span><span class="line">bridge<span class="o">&lt;-</span><span class="kr">function</span><span class="p">(</span>x<span class="p">,</span> y<span class="p">,</span> lambda<span class="p">,</span> q<span class="o">=</span><span class="m">1</span><span class="p">,</span> eta<span class="o">=</span><span class="m">0.001</span><span class="p">){</span>
</span><span class="line">  <span class="kn">library</span><span class="p">(</span>glmnet<span class="p">)</span>
</span><span class="line">  <span class="c1"># use ridge coefficients as a starting value</span>
</span><span class="line">  beta.start<span class="o">&lt;-</span>coef<span class="p">(</span>glmnet<span class="p">(</span>x<span class="p">,</span> y<span class="p">,</span> alpha<span class="o">=</span><span class="m">0</span><span class="p">,</span> lambda<span class="o">=</span>lambda<span class="p">,</span> intercept<span class="o">=</span><span class="bp">F</span><span class="p">))</span>
</span><span class="line">  beta.mat<span class="o">&lt;-</span><span class="kt">matrix</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span>ncol<span class="o">=</span><span class="kp">ncol</span><span class="p">(</span>beta.start<span class="p">),</span>nrow<span class="o">=</span><span class="kp">nrow</span><span class="p">(</span>beta.start<span class="p">)</span><span class="m">-1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># take each lambda value in the grid</span>
</span><span class="line">  <span class="kr">for</span><span class="p">(</span>i <span class="kr">in</span> <span class="m">1</span><span class="o">:</span><span class="kp">length</span><span class="p">(</span>grid<span class="p">)){</span>
</span><span class="line">    <span class="c1"># initial beta without intercept</span>
</span><span class="line">    beta_prev<span class="o">&lt;-</span><span class="kp">as.vector</span><span class="p">(</span>beta.start<span class="p">[</span><span class="m">-1</span><span class="p">,</span>i<span class="p">])</span>
</span><span class="line">    <span class="c1"># initial converge</span>
</span><span class="line">    converge<span class="o">&lt;-</span><span class="m">10</span><span class="o">^</span><span class="m">10</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># iteration until converge or two many iterations</span>
</span><span class="line">    iteration<span class="o">&lt;-</span><span class="m">0</span>
</span><span class="line">    <span class="kr">while</span><span class="p">(</span>converge<span class="o">&gt;</span>eta <span class="o">&amp;&amp;</span> iteration<span class="o">&lt;=</span><span class="m">100</span><span class="p">){</span>
</span><span class="line">      iteration<span class="o">&lt;-</span>iteration<span class="m">+1</span>
</span><span class="line">      <span class="c1"># judge whether some beta is small enough</span>
</span><span class="line">      del<span class="o">&lt;-</span><span class="kp">which</span><span class="p">(</span><span class="kp">abs</span><span class="p">(</span>beta_prev<span class="p">)</span><span class="o">&lt;</span>eta<span class="p">)</span>
</span><span class="line">
</span><span class="line">      <span class="c1"># if all coefficient are small enough then stop the iteration</span>
</span><span class="line">      <span class="kr">if</span><span class="p">(</span><span class="kp">length</span><span class="p">(</span>del<span class="p">)</span><span class="o">==</span><span class="kp">length</span><span class="p">(</span>beta_prev<span class="p">)){</span>
</span><span class="line">        beta_prev<span class="p">[</span>del<span class="p">]</span><span class="o">&lt;-</span><span class="m">0</span>
</span><span class="line">        converge<span class="o">&lt;-</span><span class="m">0</span>
</span><span class="line">
</span><span class="line">        <span class="c1"># else if we need to remove some but not all of the coefficients  </span>
</span><span class="line">      <span class="p">}</span><span class="kr">else</span> <span class="kr">if</span><span class="p">(</span><span class="kp">length</span><span class="p">(</span>del<span class="p">)</span><span class="o">&gt;</span><span class="m">0</span><span class="p">){</span>
</span><span class="line">        <span class="c1"># set these beta to 0</span>
</span><span class="line">        beta_prev<span class="p">[</span>del<span class="p">]</span><span class="o">&lt;-</span><span class="m">0</span>
</span><span class="line">
</span><span class="line">        <span class="c1"># update design matrix x</span>
</span><span class="line">        x.new<span class="o">&lt;-</span>x<span class="p">;</span>x.new<span class="o">&lt;-</span>x.new<span class="p">[,</span><span class="o">-</span>del<span class="p">]</span>
</span><span class="line">
</span><span class="line">        <span class="c1"># calculate the diagonal matrix involving penalty terms</span>
</span><span class="line">        <span class="c1"># and the next beta</span>
</span><span class="line">        <span class="kr">if</span><span class="p">(</span><span class="kp">length</span><span class="p">(</span>beta_prev<span class="p">)</span><span class="o">-</span><span class="kp">length</span><span class="p">(</span>del<span class="p">)</span><span class="o">==</span><span class="m">1</span><span class="p">){</span>
</span><span class="line">          <span class="kp">diag</span><span class="o">&lt;-</span>grid<span class="p">[</span>i<span class="p">]</span><span class="o">*</span><span class="kp">q</span><span class="o">*</span><span class="p">(</span><span class="kp">abs</span><span class="p">(</span>beta_prev<span class="p">[</span><span class="o">-</span>del<span class="p">])</span><span class="o">^</span><span class="p">(</span><span class="kp">q</span><span class="m">-2</span><span class="p">))</span><span class="o">/</span><span class="m">2</span>
</span><span class="line">        <span class="p">}</span><span class="kp">else</span><span class="p">{</span>
</span><span class="line">          <span class="kp">diag</span><span class="o">&lt;-</span><span class="kp">diag</span><span class="p">(</span>grid<span class="p">[</span>i<span class="p">]</span><span class="o">*</span><span class="kp">q</span><span class="o">*</span><span class="p">(</span><span class="kp">abs</span><span class="p">(</span>beta_prev<span class="p">[</span><span class="o">-</span>del<span class="p">])</span><span class="o">^</span><span class="p">(</span><span class="kp">q</span><span class="m">-2</span><span class="p">))</span><span class="o">/</span><span class="m">2</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1"># next beta</span>
</span><span class="line">        beta_curr<span class="o">&lt;-</span>beta_prev
</span><span class="line">        beta_curr<span class="p">[</span><span class="o">-</span>del<span class="p">]</span><span class="o">&lt;-</span><span class="kp">solve</span><span class="p">(</span><span class="kp">t</span><span class="p">(</span>x.new<span class="p">)</span><span class="o">%*%</span>x.new<span class="o">+</span><span class="kp">diag</span><span class="p">)</span><span class="o">%*%</span><span class="kp">t</span><span class="p">(</span>x.new<span class="p">)</span><span class="o">%*%</span>y
</span><span class="line">
</span><span class="line">        <span class="c1"># new converge value</span>
</span><span class="line">        converge<span class="o">&lt;-</span><span class="kp">sum</span><span class="p">((</span>beta_curr<span class="o">-</span>beta_prev<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">)</span>
</span><span class="line">        <span class="c1"># next iteration</span>
</span><span class="line">        beta_prev<span class="o">&lt;-</span>beta_curr
</span><span class="line">
</span><span class="line">        <span class="c1"># if we don&#39;t need to remove the coefficients</span>
</span><span class="line">      <span class="p">}</span><span class="kp">else</span><span class="p">{</span>
</span><span class="line">        x.new<span class="o">&lt;-</span>x
</span><span class="line">        <span class="kp">diag</span><span class="o">&lt;-</span><span class="kp">diag</span><span class="p">(</span>grid<span class="p">[</span>i<span class="p">]</span><span class="o">*</span><span class="kp">q</span><span class="o">*</span><span class="p">(</span><span class="kp">abs</span><span class="p">(</span>beta_prev<span class="p">)</span><span class="o">^</span><span class="p">(</span><span class="kp">q</span><span class="m">-2</span><span class="p">))</span><span class="o">/</span><span class="m">2</span><span class="p">)</span>
</span><span class="line">        <span class="c1"># next beta</span>
</span><span class="line">        beta_curr<span class="o">&lt;-</span><span class="kp">solve</span><span class="p">(</span><span class="kp">t</span><span class="p">(</span>x.new<span class="p">)</span><span class="o">%*%</span>x.new<span class="o">+</span><span class="kp">diag</span><span class="p">)</span><span class="o">%*%</span><span class="kp">t</span><span class="p">(</span>x.new<span class="p">)</span><span class="o">%*%</span>y
</span><span class="line">
</span><span class="line">        <span class="c1"># new converge value</span>
</span><span class="line">        converge<span class="o">&lt;-</span><span class="kp">sum</span><span class="p">((</span>beta_curr<span class="o">-</span>beta_prev<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">)</span>
</span><span class="line">        <span class="c1"># next iteration</span>
</span><span class="line">        beta_prev<span class="o">&lt;-</span>beta_curr
</span><span class="line">
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    beta.mat<span class="p">[,</span>i<span class="p">]</span><span class="o">&lt;-</span>beta_prev
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="kp">colnames</span><span class="p">(</span>beta.mat<span class="p">)</span><span class="o">&lt;-</span>grid
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>beta.mat<span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># The function to find the optimal coefficients set</span>
</span><span class="line"><span class="c1"># that minimize mse of validation set</span>
</span><span class="line">bridge.opt<span class="o">&lt;-</span><span class="kr">function</span><span class="p">(</span>coef.matrix<span class="p">,</span> newx<span class="p">,</span> newy<span class="p">){</span>
</span><span class="line">  <span class="c1"># calculate the mse</span>
</span><span class="line">  mse.validate<span class="o">&lt;-</span><span class="kc">NULL</span>
</span><span class="line">  <span class="kr">for</span><span class="p">(</span>i <span class="kr">in</span> <span class="m">1</span><span class="o">:</span><span class="kp">ncol</span><span class="p">(</span>coef.matrix<span class="p">)){</span>
</span><span class="line">    mse.validate<span class="o">&lt;-</span><span class="kt">c</span><span class="p">(</span>mse.validate<span class="p">,</span> <span class="kp">mean</span><span class="p">((</span>newx<span class="o">%*%</span>coef.matrix<span class="p">[,</span>i<span class="p">]</span><span class="o">-</span>newy<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">))</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="c1"># find the optimal coefficients set</span>
</span><span class="line">  coef.opt<span class="o">&lt;-</span>coef.matrix<span class="p">[,</span><span class="kp">which.min</span><span class="p">(</span>mse.validate<span class="p">)]</span>
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>coef.opt<span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1">##################</span>
</span><span class="line"><span class="c1"># start simulation</span>
</span><span class="line"><span class="c1"># For this simulation, create three data sets </span>
</span><span class="line"><span class="c1"># consisting of 50/50/200 observations (training/validation/testing).</span>
</span><span class="line"><span class="c1"># Use validation data to select the tuning parameter (lambda).</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1"># q settings</span>
</span><span class="line">q_seq<span class="o">&lt;-</span><span class="kt">c</span><span class="p">(</span><span class="m">0.1</span><span class="p">,</span><span class="m">0.5</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">)</span>
</span><span class="line"><span class="c1"># lambda grid</span>
</span><span class="line">grid<span class="o">=</span><span class="m">10</span><span class="o">^</span><span class="kp">seq</span><span class="p">(</span><span class="m">10</span><span class="p">,</span><span class="m">-2</span><span class="p">,</span>length<span class="o">=</span><span class="m">100</span><span class="p">)</span>
</span><span class="line"><span class="c1"># training and testing set</span>
</span><span class="line">ntrain<span class="o">&lt;-</span><span class="m">50</span>
</span><span class="line">ntest<span class="o">&lt;-</span><span class="m">200</span>
</span><span class="line"><span class="c1"># validation set size</span>
</span><span class="line">nvalidate<span class="o">&lt;-</span><span class="m">50</span>
</span><span class="line">
</span><span class="line"><span class="c1"># repeat number</span>
</span><span class="line">repeatnum<span class="o">&lt;-</span><span class="m">100</span>
</span><span class="line"><span class="c1"># initialize MSE</span>
</span><span class="line">MSE<span class="o">&lt;-</span><span class="kt">matrix</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span> nrow<span class="o">=</span>repeatnum<span class="p">,</span>ncol<span class="o">=</span><span class="kp">length</span><span class="p">(</span>q_seq<span class="p">))</span>
</span><span class="line"><span class="kp">colnames</span><span class="p">(</span>MSE<span class="p">)</span><span class="o">&lt;-</span>q_seq
</span><span class="line">
</span><span class="line"><span class="kn">library</span><span class="p">(</span>MASS<span class="p">)</span>
</span><span class="line"><span class="c1"># the beta</span>
</span><span class="line"><span class="kp">beta</span><span class="o">&lt;-</span><span class="kt">matrix</span><span class="p">(</span><span class="kt">c</span><span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="m">1.5</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">),</span>ncol<span class="o">=</span><span class="m">1</span><span class="p">)</span>
</span><span class="line"><span class="c1"># covariance matrix of X</span>
</span><span class="line">cov<span class="o">&lt;-</span><span class="kt">matrix</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="m">8</span><span class="p">,</span><span class="m">8</span><span class="p">)</span>
</span><span class="line"><span class="kr">for</span> <span class="p">(</span>i <span class="kr">in</span> <span class="m">1</span><span class="o">:</span><span class="m">8</span><span class="p">){</span>
</span><span class="line">  <span class="kr">for</span> <span class="p">(</span>j <span class="kr">in</span> <span class="m">1</span><span class="o">:</span><span class="m">8</span><span class="p">){</span>
</span><span class="line">    cov<span class="p">[</span>i<span class="p">,</span>j<span class="p">]</span><span class="o">&lt;-</span><span class="m">0.5</span><span class="o">^</span><span class="p">(</span><span class="kp">abs</span><span class="p">(</span>i<span class="o">-</span>j<span class="p">))</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kr">for</span> <span class="p">(</span>i <span class="kr">in</span> <span class="m">1</span><span class="o">:</span>repeatnum<span class="p">){</span>
</span><span class="line">  <span class="c1"># generate X</span>
</span><span class="line">  x.train<span class="o">&lt;-</span>mvrnorm<span class="p">(</span>n<span class="o">=</span>ntrain<span class="p">,</span><span class="kp">rep</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">8</span><span class="p">),</span>cov<span class="p">)</span>
</span><span class="line">  x.test <span class="o">&lt;-</span>mvrnorm<span class="p">(</span>n<span class="o">=</span>ntest<span class="p">,</span><span class="kp">rep</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">8</span><span class="p">),</span>cov<span class="p">)</span>
</span><span class="line">  x.validate <span class="o">&lt;-</span>mvrnorm<span class="p">(</span>n<span class="o">=</span>nvalidate<span class="p">,</span><span class="kp">rep</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">8</span><span class="p">),</span>cov<span class="p">)</span>
</span><span class="line">  <span class="c1"># generate error term</span>
</span><span class="line">  err.train<span class="o">&lt;-</span><span class="kt">matrix</span><span class="p">(</span>rnorm<span class="p">(</span>n<span class="o">=</span>ntrain<span class="p">,</span>mean<span class="o">=</span><span class="m">0</span><span class="p">,</span>sd<span class="o">=</span><span class="m">3</span><span class="p">),</span>ncol<span class="o">=</span><span class="m">1</span><span class="p">)</span>
</span><span class="line">  err.test<span class="o">&lt;-</span><span class="kt">matrix</span><span class="p">(</span>rnorm<span class="p">(</span>n<span class="o">=</span>ntest<span class="p">,</span>mean<span class="o">=</span><span class="m">0</span><span class="p">,</span>sd<span class="o">=</span><span class="m">3</span><span class="p">),</span>ncol<span class="o">=</span><span class="m">1</span><span class="p">)</span>
</span><span class="line">  err.validate<span class="o">&lt;-</span><span class="kt">matrix</span><span class="p">(</span>rnorm<span class="p">(</span>n<span class="o">=</span>nvalidate<span class="p">,</span>mean<span class="o">=</span><span class="m">0</span><span class="p">,</span>sd<span class="o">=</span><span class="m">3</span><span class="p">),</span>ncol<span class="o">=</span><span class="m">1</span><span class="p">)</span>
</span><span class="line">  <span class="c1"># calculate Y</span>
</span><span class="line">  y.train<span class="o">&lt;-</span>x.train<span class="o">%*%</span><span class="kp">beta</span><span class="o">+</span>err.train
</span><span class="line">  y.test<span class="o">&lt;-</span>x.test<span class="o">%*%</span><span class="kp">beta</span><span class="o">+</span>err.test
</span><span class="line">  y.validate<span class="o">&lt;-</span>x.validate<span class="o">%*%</span><span class="kp">beta</span><span class="o">+</span>err.validate
</span><span class="line">  <span class="c1"># centralize Y and standardize X</span>
</span><span class="line">  y.train<span class="o">&lt;-</span><span class="kp">scale</span><span class="p">(</span>y.train<span class="p">,</span>scale<span class="o">=</span><span class="bp">F</span><span class="p">);</span>y.test<span class="o">&lt;-</span><span class="kp">scale</span><span class="p">(</span>y.test<span class="p">,</span>scale<span class="o">=</span><span class="bp">F</span><span class="p">)</span>
</span><span class="line">  y.validate<span class="o">&lt;-</span><span class="kp">scale</span><span class="p">(</span>y.validate<span class="p">,</span>scale<span class="o">=</span><span class="bp">F</span><span class="p">)</span>
</span><span class="line">  x.train<span class="o">&lt;-</span><span class="kp">scale</span><span class="p">(</span>x.train<span class="p">);</span>x.test<span class="o">&lt;-</span><span class="kp">scale</span><span class="p">(</span>x.test<span class="p">)</span>
</span><span class="line">  x.validate<span class="o">&lt;-</span><span class="kp">scale</span><span class="p">(</span>x.validate<span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># run for each q</span>
</span><span class="line">  <span class="kr">for</span><span class="p">(</span>j <span class="kr">in</span> <span class="m">1</span><span class="o">:</span><span class="kp">length</span><span class="p">(</span>q_seq<span class="p">)){</span>
</span><span class="line">
</span><span class="line">    <span class="c1"># coefficients for trainning set</span>
</span><span class="line">    bridge.train<span class="o">&lt;-</span>bridge<span class="p">(</span>x.train<span class="p">,</span> y.train<span class="p">,</span> grid<span class="p">,</span> q<span class="o">=</span>q_seq<span class="p">[</span>j<span class="p">],</span> eta<span class="o">=</span><span class="m">0.001</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># find the optimal coefficients set that minimize mse of validation set</span>
</span><span class="line">    coef.opt<span class="o">&lt;-</span>bridge.opt<span class="p">(</span>bridge.train<span class="p">,</span> x.validate<span class="p">,</span> y.validate<span class="p">)</span>
</span><span class="line">    <span class="c1"># MSE on the test set using the optimal model</span>
</span><span class="line">    MSE<span class="p">[</span>i<span class="p">,</span>j<span class="p">]</span><span class="o">&lt;-</span><span class="kp">mean</span><span class="p">((</span>x.test<span class="o">%*%</span>coef.opt<span class="o">-</span>y.test<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># mean of MSEs under different models</span>
</span><span class="line"><span class="kp">apply</span><span class="p">(</span>MSE<span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="kp">mean</span><span class="p">)</span>
</span><span class="line"><span class="c1"># sd of MSEs under different models</span>
</span><span class="line"><span class="kp">apply</span><span class="p">(</span>MSE<span class="p">,</span><span class="m">2</span><span class="p">,</span>sd<span class="p">)</span>
</span><span class="line"><span class="c1"># boxplot of MSEs under different models</span>
</span><span class="line">boxplot<span class="p">(</span>MSE<span class="p">,</span> ylab<span class="o">=</span><span class="s">&quot;MSE&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;q&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://bioops.info/images/uploads/2015/bridge.png" alt="bridge MSE plots" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Consistent Estimator of Bernouli Distribution]]></title>
    <link href="http://bioops.info/2015/01/simulation-bernoulli-consitent-estimator/"/>
    <updated>2015-01-04T01:53:14+00:00</updated>
    <id>http://bioops.info/2015/01/simulation-bernoulli-consitent-estimator</id>
    <content type="html"><![CDATA[<p>This is a simple post showing the basic knowledge of statistics, the consistency.</p>

<p>For Bernoulli distribution, $ Y \sim B(n,p) $, $ \hat{p}=Y/n $ is a consistent estimator of $ p $, because:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\lim_{n \to \infty} \left(p-\epsilon<\frac{Y}{n}<p+\epsilon\right)=1, %]]&gt;</script>

<p>for any positive number $ \epsilon $.</p>

<p>Here is the simulation to show the estimator is consitent.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1"># set parameters</span>
</span><span class="line">n<span class="o">&lt;-</span><span class="m">1000</span><span class="p">;</span>p<span class="o">&lt;-</span><span class="m">0.5</span><span class="p">;</span>
</span><span class="line"><span class="c1"># n Bernoulli trails</span>
</span><span class="line">obs<span class="o">&lt;-</span>rbinom<span class="p">(</span>n<span class="p">,</span><span class="m">1</span><span class="p">,</span>p<span class="p">)</span>
</span><span class="line"><span class="c1"># estimate p on different number of trials.</span>
</span><span class="line">phat<span class="o">&lt;-</span><span class="kp">cumsum</span><span class="p">(</span>obs<span class="p">)</span><span class="o">/</span><span class="kp">cumsum</span><span class="p">(</span><span class="kp">rep</span><span class="p">(</span><span class="m">1</span><span class="p">,</span>n<span class="p">))</span>
</span><span class="line"><span class="c1"># the convergence plot</span>
</span><span class="line">plot<span class="p">(</span>phat<span class="p">,</span> type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span> xlab<span class="o">=</span><span class="s">&quot;Trails&quot;</span><span class="p">)</span>
</span><span class="line">abline<span class="p">(</span>h<span class="o">=</span>p<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://bioops.info/images/uploads/2015/Rplot01.png" alt="convergence plot" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1"># then, 100 repetitions</span>
</span><span class="line">
</span><span class="line"><span class="c1"># set parameters</span>
</span><span class="line">n<span class="o">&lt;-</span><span class="m">1000</span><span class="p">;</span>p<span class="o">&lt;-</span><span class="m">0.5</span><span class="p">;</span>B<span class="o">&lt;-</span><span class="m">100</span><span class="p">;</span>
</span><span class="line"><span class="c1"># n*B Bernoulli trails</span>
</span><span class="line">obs<span class="o">&lt;-</span>rbinom<span class="p">(</span>n<span class="o">*</span>B<span class="p">,</span><span class="m">1</span><span class="p">,</span>p<span class="p">)</span>
</span><span class="line"><span class="c1"># convert n*B observations to a n*B matrix</span>
</span><span class="line">obs_mat<span class="o">&lt;-</span><span class="kt">matrix</span><span class="p">(</span>obs<span class="p">,</span> nrow<span class="o">=</span>n<span class="p">,</span> ncol<span class="o">=</span>B<span class="p">)</span>
</span><span class="line"><span class="c1"># a function to estimate p on different number of trials</span>
</span><span class="line">est_p<span class="o">&lt;-</span><span class="kr">function</span><span class="p">(</span>x<span class="p">,</span>n<span class="p">)</span> <span class="kp">cumsum</span><span class="p">(</span>x<span class="p">)</span><span class="o">/</span><span class="kp">cumsum</span><span class="p">(</span><span class="kp">rep</span><span class="p">(</span><span class="m">1</span><span class="p">,</span>n<span class="p">))</span>
</span><span class="line"><span class="c1"># estimate p on different number of trials for each repetition</span>
</span><span class="line">phat_mat<span class="o">&lt;-</span><span class="kp">apply</span><span class="p">(</span>obs_mat<span class="p">,</span><span class="m">2</span><span class="p">,</span> est_p<span class="p">,</span> n<span class="o">=</span>n<span class="p">)</span>
</span><span class="line"><span class="c1"># the convergence plot with 100 repetitions</span>
</span><span class="line">matplot<span class="p">(</span>phat_mat<span class="p">,</span>type<span class="o">=</span><span class="s">&quot;l&quot;</span><span class="p">,</span>lty<span class="o">=</span><span class="m">1</span><span class="p">,</span>xlab<span class="o">=</span><span class="s">&quot;Trials&quot;</span><span class="p">,</span>ylab<span class="o">=</span><span class="s">&quot;phat&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://bioops.info/images/uploads/2015/Rplot02.png" alt="convergence plots" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Permutation Test for Principal Component Analysis]]></title>
    <link href="http://bioops.info/2015/01/permutation-pca/"/>
    <updated>2015-01-02T05:35:51+00:00</updated>
    <id>http://bioops.info/2015/01/permutation-pca</id>
    <content type="html"><![CDATA[<p>The procedure of permutation test for PCA is as follows:</p>

<p>For each replicate,</p>

<ol>
  <li>
    <p>Individually permute each column of the data matrix.</p>
  </li>
  <li>
    <p>Conduct the PCA and find the proportion of variance explained by each of the components 1 to s. Store this information.</p>
  </li>
  <li>
    <p>Repeat 1 and 2 R times.</p>
  </li>
</ol>

<p>At the end of this we will have a matrix with R rows and s columns that contains the proportion of variance explained by each component for each replicate.</p>

<p>Finally, compare the observed values from the original data to the set of values from the permutations in order to determine the approximate p-value.</p>

<p>The R code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pca_perm.R</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1"># the fuction to assess the significance of the principal components.</span>
</span><span class="line">sign.pc<span class="o">&lt;-</span><span class="kr">function</span><span class="p">(</span>x<span class="p">,</span>R<span class="o">=</span><span class="m">1000</span><span class="p">,</span>s<span class="o">=</span><span class="m">10</span><span class="p">,</span> cor<span class="o">=</span><span class="bp">T</span><span class="p">,</span><span class="kc">...</span><span class="p">){</span>
</span><span class="line">  <span class="c1"># run PCA</span>
</span><span class="line">  pc.out<span class="o">&lt;-</span>princomp<span class="p">(</span>x<span class="p">,</span>cor<span class="o">=</span>cor<span class="p">,</span><span class="kc">...</span><span class="p">)</span>
</span><span class="line">  <span class="c1"># the proportion of variance of each PC</span>
</span><span class="line">  pve<span class="o">=</span><span class="p">(</span>pc.out<span class="o">$</span>sdev<span class="o">^</span><span class="m">2</span><span class="o">/</span><span class="kp">sum</span><span class="p">(</span>pc.out<span class="o">$</span>sdev<span class="o">^</span><span class="m">2</span><span class="p">))[</span><span class="m">1</span><span class="o">:</span>s<span class="p">]</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># a matrix with R rows and s columns that contains</span>
</span><span class="line">  <span class="c1"># the proportion of variance explained by each pc</span>
</span><span class="line">  <span class="c1"># for each randomization replicate.</span>
</span><span class="line">  pve.perm<span class="o">&lt;-</span><span class="kt">matrix</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span>ncol<span class="o">=</span>s<span class="p">,</span>nrow<span class="o">=</span>R<span class="p">)</span>
</span><span class="line">  <span class="kr">for</span><span class="p">(</span>i <span class="kr">in</span> <span class="m">1</span><span class="o">:</span>R<span class="p">){</span>
</span><span class="line">    <span class="c1"># permutation each column</span>
</span><span class="line">    x.perm<span class="o">&lt;-</span><span class="kp">apply</span><span class="p">(</span>x<span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="kp">sample</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># run PCA</span>
</span><span class="line">    pc.perm.out<span class="o">&lt;-</span>princomp<span class="p">(</span>x.perm<span class="p">,</span>cor<span class="o">=</span>cor<span class="p">,</span><span class="kc">...</span><span class="p">)</span>
</span><span class="line">    <span class="c1"># the proportion of variance of each PC.perm</span>
</span><span class="line">    pve.perm<span class="p">[</span>i<span class="p">,]</span><span class="o">=</span><span class="p">(</span>pc.perm.out<span class="o">$</span>sdev<span class="o">^</span><span class="m">2</span><span class="o">/</span><span class="kp">sum</span><span class="p">(</span>pc.perm.out<span class="o">$</span>sdev<span class="o">^</span><span class="m">2</span><span class="p">))[</span><span class="m">1</span><span class="o">:</span>s<span class="p">]</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="c1"># calcalute the p-values</span>
</span><span class="line">  pval<span class="o">&lt;-</span><span class="kp">apply</span><span class="p">(</span><span class="kp">t</span><span class="p">(</span>pve.perm<span class="p">)</span><span class="o">&gt;</span>pve<span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="kp">sum</span><span class="p">)</span><span class="o">/</span>R
</span><span class="line">  <span class="kr">return</span><span class="p">(</span><span class="kt">list</span><span class="p">(</span>pve<span class="o">=</span>pve<span class="p">,</span>pval<span class="o">=</span>pval<span class="p">))</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1"># apply the function</span>
</span><span class="line"><span class="kn">library</span><span class="p">(</span>RCurl<span class="p">)</span>
</span><span class="line">data <span class="o">&lt;-</span> getURL<span class="p">(</span><span class="s">&quot;https://raw.githubusercontent.com/bioops/mis_scripts/master/statistics/data/pca.txt&quot;</span><span class="p">)</span>
</span><span class="line">OCRdata <span class="o">&lt;-</span> read.table<span class="p">(</span>text <span class="o">=</span> data<span class="p">,</span> header<span class="o">=</span><span class="bp">T</span><span class="p">,</span>sep<span class="o">=</span><span class="s">&quot;\t&quot;</span><span class="p">)</span>
</span><span class="line">OCRdat<span class="o">&lt;-</span>OCRdata<span class="p">[,</span><span class="m">-1</span><span class="p">]</span> <span class="c1">#leave out location id column</span>
</span><span class="line">sign.pc<span class="p">(</span>OCRdat<span class="p">,</span>cor<span class="o">=</span><span class="bp">T</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The result:</p>

<pre>
$pve
    Comp.1     Comp.2     Comp.3     Comp.4     Comp.5     Comp.6     Comp.7     Comp.8 
0.23129378 0.14864525 0.11552865 0.06741744 0.06274641 0.05858431 0.05033795 0.04484122 
    Comp.9    Comp.10 
0.03873311 0.03431297 

$pval
 [1] 0.000 0.000 0.000 1.000 1.000 0.996 1.000 1.000 1.000 1.000
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demo of Support Vector Machine]]></title>
    <link href="http://bioops.info/2015/01/svm/"/>
    <updated>2015-01-01T20:43:07+00:00</updated>
    <id>http://bioops.info/2015/01/svm</id>
    <content type="html"><![CDATA[<p>Demo of SVM</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>svm.R</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1"># load library</span>
</span><span class="line"><span class="kn">library</span><span class="p">(</span>e1071<span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># simulate x and y</span>
</span><span class="line">x1<span class="o">&lt;-</span>rnorm<span class="p">(</span><span class="m">100</span><span class="p">);</span>x2<span class="o">&lt;-</span>rnorm<span class="p">(</span><span class="m">100</span><span class="p">)</span>
</span><span class="line">y<span class="o">&lt;-</span><span class="kp">as.factor</span><span class="p">(</span><span class="kp">ifelse</span><span class="p">(</span>x1<span class="o">^</span><span class="m">2</span><span class="o">+</span>x2<span class="o">^</span><span class="m">2</span><span class="o">&lt;=</span><span class="m">1.6</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">-1</span><span class="p">))</span>
</span><span class="line">dat3<span class="o">&lt;-</span><span class="kt">data.frame</span><span class="p">(</span>x1<span class="p">,</span>x2<span class="p">,</span>y<span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># (a) tuning parameters</span>
</span><span class="line">cost<span class="o">&lt;-</span><span class="kt">c</span><span class="p">(</span><span class="m">0.001</span><span class="p">,</span> <span class="m">0.01</span><span class="p">,</span> <span class="m">0.1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">100</span><span class="p">)</span>
</span><span class="line"><span class="kp">gamma</span><span class="o">&lt;-</span><span class="kp">seq</span><span class="p">(</span><span class="m">0.1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">0.1</span><span class="p">)</span>
</span><span class="line">tune.out<span class="o">&lt;-</span>tune<span class="p">(</span>svm<span class="p">,</span> y<span class="o">~</span><span class="m">.</span><span class="p">,</span> data<span class="o">=</span>dat3<span class="p">,</span> kernel<span class="o">=</span><span class="s">&quot;radial&quot;</span><span class="p">,</span>
</span><span class="line">              ranges<span class="o">=</span><span class="kt">list</span><span class="p">(</span>cost<span class="o">=</span>cost<span class="p">,</span>gamma<span class="o">=</span><span class="kp">gamma</span><span class="p">))</span>
</span><span class="line">bestmod<span class="o">&lt;-</span>tune.out<span class="o">$</span>best.model
</span><span class="line"><span class="c1"># the best model</span>
</span><span class="line"><span class="kp">summary</span><span class="p">(</span>bestmod<span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># (b) test set</span>
</span><span class="line"><span class="c1"># simulate test set</span>
</span><span class="line">x1<span class="o">&lt;-</span>rnorm<span class="p">(</span><span class="m">100</span><span class="p">);</span>x2<span class="o">&lt;-</span>rnorm<span class="p">(</span><span class="m">100</span><span class="p">)</span>
</span><span class="line">y<span class="o">&lt;-</span><span class="kp">as.factor</span><span class="p">(</span><span class="kp">ifelse</span><span class="p">(</span>x1<span class="o">^</span><span class="m">2</span><span class="o">+</span>x2<span class="o">^</span><span class="m">2</span><span class="o">&lt;=</span><span class="m">1.6</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">-1</span><span class="p">))</span>
</span><span class="line">dat3.test<span class="o">&lt;-</span><span class="kt">data.frame</span><span class="p">(</span>x1<span class="p">,</span>x2<span class="p">,</span>y<span class="p">)</span>
</span><span class="line">ypred<span class="o">&lt;-</span>predict<span class="p">(</span>bestmod<span class="p">,</span>dat3.test<span class="p">)</span>
</span><span class="line"><span class="c1"># the confusion matrix</span>
</span><span class="line"><span class="kp">table</span><span class="p">(</span>predict<span class="o">=</span>ypred<span class="p">,</span> truth<span class="o">=</span>dat3.test<span class="o">$</span>y<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linear Regression With Cross Validation]]></title>
    <link href="http://bioops.info/2015/01/lm-cv/"/>
    <updated>2015-01-01T20:33:24+00:00</updated>
    <id>http://bioops.info/2015/01/lm-cv</id>
    <content type="html"><![CDATA[<p>Cross validation for linear model and the bootstrap confidence interval for coefficients</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>linear_CV.R</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1"># (a) Linear model</span>
</span><span class="line">
</span><span class="line"><span class="c1"># read data</span>
</span><span class="line"><span class="kn">library</span><span class="p">(</span>RCurl<span class="p">)</span>
</span><span class="line">data <span class="o">&lt;-</span> getURL<span class="p">(</span><span class="s">&quot;https://raw.githubusercontent.com/bioops/mis_scripts/master/statistics/data/prostateData.txt&quot;</span><span class="p">)</span>
</span><span class="line">prostate <span class="o">&lt;-</span> read.table<span class="p">(</span>text <span class="o">=</span> data<span class="p">,</span> header<span class="o">=</span><span class="bp">T</span><span class="p">,</span>sep<span class="o">=</span><span class="s">&quot;\t&quot;</span><span class="p">)</span>
</span><span class="line"><span class="c1"># remove the first column</span>
</span><span class="line">prostate<span class="o">&lt;-</span>prostate<span class="p">[,</span><span class="m">-1</span><span class="p">]</span>
</span><span class="line"><span class="c1"># run the linear model</span>
</span><span class="line">prostate_lm<span class="o">&lt;-</span>lm<span class="p">(</span>lpsa<span class="o">~</span><span class="m">.</span><span class="p">,</span>data<span class="o">=</span>prostate<span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># summary of the fit</span>
</span><span class="line"><span class="kp">summary</span><span class="p">(</span>prostate_lm<span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1"># (b) Cross-validation</span>
</span><span class="line">
</span><span class="line"><span class="c1"># need boot package</span>
</span><span class="line"><span class="kn">library</span><span class="p">(</span>boot<span class="p">)</span>
</span><span class="line"><span class="c1"># fit the linear model</span>
</span><span class="line">glm.fit<span class="o">&lt;-</span>glm<span class="p">(</span>lpsa<span class="o">~</span>lcavol<span class="o">+</span>lweight<span class="o">+</span>age<span class="o">+</span>lbph<span class="o">+</span>svi<span class="o">+</span>lcp<span class="o">+</span>gleason<span class="o">+</span>pgg45<span class="p">,</span>data<span class="o">=</span>prostate<span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># LOOCV</span>
</span><span class="line">cv.glm<span class="p">(</span>prostate<span class="p">,</span> glm.fit<span class="p">)</span><span class="o">$</span>delta<span class="p">[</span><span class="m">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 10-fold CV</span>
</span><span class="line">cv.err.10<span class="o">&lt;-</span><span class="kp">rep</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">10</span><span class="p">)</span>
</span><span class="line"><span class="kr">for</span><span class="p">(</span>i <span class="kr">in</span> <span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">){</span>
</span><span class="line">  cv.err.10<span class="p">[</span>i<span class="p">]</span><span class="o">&lt;-</span>cv.glm<span class="p">(</span>prostate<span class="p">,</span> glm.fit<span class="p">,</span> K<span class="o">=</span><span class="m">10</span><span class="p">)</span><span class="o">$</span>delta<span class="p">[</span><span class="m">1</span><span class="p">]</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># mean error of 10-fold CV</span>
</span><span class="line"><span class="kp">mean</span><span class="p">(</span>cv.err.10<span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1"># (c) Bootstrap</span>
</span><span class="line">
</span><span class="line"><span class="c1"># get ther residuals and fitted values from linear model</span>
</span><span class="line">prostate_new<span class="o">&lt;-</span><span class="kt">data.frame</span><span class="p">(</span>prostate<span class="p">,</span> res<span class="o">=</span>resid<span class="p">(</span>prostate_lm<span class="p">),</span> fitted<span class="o">=</span>fitted<span class="p">(</span>prostate_lm<span class="p">))</span>
</span><span class="line"><span class="c1"># a function to get the coefficients from each bootstrap</span>
</span><span class="line">prostate.fun<span class="o">&lt;-</span><span class="kr">function</span><span class="p">(</span>data<span class="p">,</span> i<span class="p">){</span>
</span><span class="line">  d<span class="o">&lt;-</span>data
</span><span class="line">  d<span class="o">$</span>lpsa<span class="o">&lt;-</span>d<span class="o">$</span>fitted<span class="o">+</span>d<span class="o">$</span>res<span class="p">[</span>i<span class="p">]</span>
</span><span class="line">  coef<span class="p">(</span>update<span class="p">(</span>prostate_lm<span class="p">,</span> data<span class="o">=</span>d<span class="p">))</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="c1"># bootstrap</span>
</span><span class="line">prostate.lm.boot<span class="o">&lt;-</span>boot<span class="p">(</span>prostate_new<span class="p">,</span> prostate.fun<span class="p">,</span> R<span class="o">=</span><span class="m">1000</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 95% conficence level for lcavol</span>
</span><span class="line">boot.ci<span class="p">(</span>prostate.lm.boot<span class="p">,</span> index<span class="o">=</span><span class="m">2</span><span class="p">)</span>
</span><span class="line"><span class="c1"># 95% conficence level for lweight</span>
</span><span class="line">boot.ci<span class="p">(</span>prostate.lm.boot<span class="p">,</span> index<span class="o">=</span><span class="m">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estimate Gamma Distribution Parmaters Using MME and MLE]]></title>
    <link href="http://bioops.info/2015/01/gamma-mme-mle/"/>
    <updated>2015-01-01T12:13:59+00:00</updated>
    <id>http://bioops.info/2015/01/gamma-mme-mle</id>
    <content type="html"><![CDATA[<p>This post shows how to estimate gamma distribution parameters using (a) moment of estimation (MME) and (b) maximum likelihood estimate (MLE).</p>

<p>The probability density function of Gamma distribution is</p>

<script type="math/tex; mode=display">\frac{1}{\Gamma (\alpha) \beta ^{\alpha}} x^{\alpha - 1} e^{- \frac{x}{\beta}}</script>

<p>The MME:</p>

<script type="math/tex; mode=display">\hat{\alpha}=\frac{n\bar{X} ^2}{\sum_{i=1}^{n} (X_i-\bar{X})^2}</script>

<script type="math/tex; mode=display">\hat{\beta}=\frac{\sum_{i=1}^{n} (X_i-\bar{X})^2}{n \bar{X}}</script>

<p>We can calculate the MLE of $ \alpha $ using the Newton-Raphson method.</p>

<p>For $ k =1,2,…,$</p>

<script type="math/tex; mode=display">\hat{\alpha} ^{(k)}=\hat{\alpha} ^{(k-1)} - \frac{\ell'(\hat{\alpha} ^{(k-1)})}{\ell'' (\hat{\alpha} ^{(k-1)})}</script>

<p>where</p>

<script type="math/tex; mode=display">\ell' (\alpha) = n \log \left(\frac{\alpha}{\bar{X}}\right)-n \frac{\Gamma '(\alpha)}{\Gamma(\alpha)}+\sum_{i=1}^{n} \log X_i</script>

<script type="math/tex; mode=display">\ell'' (\alpha) = \frac{n}{\alpha} - n \left(\frac{\Gamma '(\alpha)}{\Gamma (\alpha)}\right)'</script>

<p>Use the MME for the initial value of $ \alpha^{(0)} $, and stop the approximation when $ \vert \hat{\alpha}^{(k)}-\hat{\alpha}^{(k-1)} \vert &lt; 0.0000001 $. The MLE of $ \beta $ can be found by $ \hat{\beta} = \bar{X} / \hat{\alpha} $.</p>

<p>Below is the R code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>gamma.R</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1"># (a) MME</span>
</span><span class="line">gamma_MME<span class="o">&lt;-</span><span class="kr">function</span><span class="p">(</span>x<span class="p">){</span>
</span><span class="line">  n<span class="o">&lt;-</span><span class="kp">length</span><span class="p">(</span>x<span class="p">)</span>
</span><span class="line">  mean_x<span class="o">&lt;-</span><span class="kp">mean</span><span class="p">(</span>x<span class="p">)</span>
</span><span class="line">  alpha<span class="o">&lt;-</span>n<span class="o">*</span><span class="p">(</span>mean_x<span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="o">/</span><span class="kp">sum</span><span class="p">((</span>x<span class="o">-</span>mean_x<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">)</span>
</span><span class="line">  <span class="kp">beta</span><span class="o">&lt;-</span><span class="kp">sum</span><span class="p">((</span>x<span class="o">-</span>mean_x<span class="p">)</span><span class="o">^</span><span class="m">2</span><span class="p">)</span><span class="o">/</span>n<span class="o">/</span>mean_x
</span><span class="line">  estimate_MME<span class="o">&lt;-</span><span class="kt">data.frame</span><span class="p">(</span>alpha<span class="p">,</span><span class="kp">beta</span><span class="p">)</span>
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>estimate_MME<span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1"># (b) MLE</span>
</span><span class="line">gamma_MLE<span class="o">&lt;-</span><span class="kr">function</span><span class="p">(</span>x<span class="p">){</span>
</span><span class="line">  n<span class="o">&lt;-</span><span class="kp">length</span><span class="p">(</span>x<span class="p">)</span>
</span><span class="line">  mean_x<span class="o">&lt;-</span><span class="kp">mean</span><span class="p">(</span>x<span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># initiate the convergence and alpha value</span>
</span><span class="line">  converg<span class="o">&lt;-</span><span class="m">1000</span>
</span><span class="line">  alpha_prev<span class="o">&lt;-</span>gamma_MME<span class="p">(</span>x<span class="p">)</span><span class="o">$</span>alpha
</span><span class="line">
</span><span class="line">  <span class="c1"># initiate two vectors to store alpha and beta in each step</span>
</span><span class="line">  alpha_est<span class="o">&lt;-</span>alpha_prev
</span><span class="line">  beta_est<span class="o">&lt;-</span>mean_x<span class="o">/</span>alpha_prev
</span><span class="line">
</span><span class="line">  <span class="c1"># Newton-Raphson</span>
</span><span class="line">  <span class="kr">while</span><span class="p">(</span>converg<span class="o">&gt;</span><span class="m">0.0000001</span><span class="p">){</span>
</span><span class="line">    <span class="c1">#first derivative of alpha_k-1</span>
</span><span class="line">    der1<span class="o">&lt;-</span>n<span class="o">*</span><span class="kp">log</span><span class="p">(</span>alpha_prev<span class="o">/</span>mean_x<span class="p">)</span><span class="o">-</span>n<span class="o">*</span><span class="kp">digamma</span><span class="p">(</span>alpha_prev<span class="p">)</span><span class="o">+</span><span class="kp">sum</span><span class="p">(</span><span class="kp">log</span><span class="p">(</span>x<span class="p">))</span>
</span><span class="line">    <span class="c1">#second derivative of alpha_k-1</span>
</span><span class="line">    der2<span class="o">&lt;-</span>n<span class="o">/</span>alpha_prev<span class="o">-</span>n<span class="o">*</span><span class="kp">trigamma</span><span class="p">(</span>alpha_prev<span class="p">)</span>
</span><span class="line">    <span class="c1">#calculate next alpha</span>
</span><span class="line">    alpha_next<span class="o">&lt;-</span>alpha_prev<span class="o">-</span>der1<span class="o">/</span>der2
</span><span class="line">    <span class="c1"># get the convergence value</span>
</span><span class="line">    converg<span class="o">&lt;-</span><span class="kp">abs</span><span class="p">(</span>alpha_next<span class="o">-</span>alpha_prev<span class="p">)</span>
</span><span class="line">    <span class="c1"># store estimators in each step</span>
</span><span class="line">    alpha_est<span class="o">&lt;-</span><span class="kt">c</span><span class="p">(</span>alpha_est<span class="p">,</span> alpha_next<span class="p">)</span>
</span><span class="line">    beta_est<span class="o">&lt;-</span><span class="kt">c</span><span class="p">(</span>beta_est<span class="p">,</span> mean_x<span class="o">/</span>alpha_next<span class="p">)</span>
</span><span class="line">    <span class="c1"># go to next alpha</span>
</span><span class="line">    alpha_prev<span class="o">&lt;-</span>alpha_next
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  alpha<span class="o">&lt;-</span>alpha_next
</span><span class="line">  <span class="kp">beta</span><span class="o">&lt;-</span>mean_x<span class="o">/</span>alpha_next
</span><span class="line">  estimate_MLE<span class="o">&lt;-</span><span class="kt">data.frame</span><span class="p">(</span>alpha<span class="p">,</span><span class="kp">beta</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>estimate_MLE<span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># apply</span>
</span><span class="line">x<span class="o">&lt;-</span>rgamma<span class="p">(</span><span class="m">100</span><span class="p">,</span><span class="m">2</span><span class="p">,</span>scale<span class="o">=</span><span class="m">5</span><span class="p">)</span>
</span><span class="line">gammma_MME<span class="p">(</span>x<span class="p">)</span>
</span><span class="line">gamma_MLE<span class="p">(</span>x<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015]]></title>
    <link href="http://bioops.info/2015/01/2015/"/>
    <updated>2015-01-01T02:31:05+00:00</updated>
    <id>http://bioops.info/2015/01/2015</id>
    <content type="html"><![CDATA[<p>Happy new year!</p>

<p>Hopefully, I will <a href="http://bioops.info/">write</a> and <a href="https://github.com/bioops">code</a> more often in 2015.</p>

<p>Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CFDA Approved BGI's Next Generation Sequencing Diagnostic Products]]></title>
    <link href="http://bioops.info/2014/07/cfda-approved-bgis-next-generation-sequencing-diagnostic-products/"/>
    <updated>2014-07-04T14:32:11+00:00</updated>
    <id>http://bioops.info/2014/07/cfda-approved-bgis-next-generation-sequencing-diagnostic-products</id>
    <content type="html"><![CDATA[<p>只收集一些相关资料，不评论。
<a href="http://www.sda.gov.cn/WS01/CL0051/102239.html">http://www.sda.gov.cn/WS01/CL0051/102239.html</a>
2014年6月30日，国家食品药品监督管理总局经审查，批准了BGISEQ-1000基因测序仪、BGISEQ-100基因测序仪和胎儿染色体非整倍体（T21、T18、T13）检测试剂盒（联合探针锚定连接测序法）、胎儿染色体非整倍体（T21、T18、T13）检测试剂盒（半导体测序法）医疗器械注册。这是国家食品药品监督管理总局首次批准注册的第二代基因测序诊断产品。</p>

<p>该批产品可通过对孕周12周以上的高危孕妇外周血血浆中的游离基因片段进行基因测序，对胎儿染色体非整倍体疾病21-三体综合征、18-三体综合征和13-三体综合征进行无创产前检查和辅助诊断。</p>

<p><a href="http://www.knowgene.com/question/677">http://www.knowgene.com/question/677</a>
BGISEQ-1000基因测序仪基于Complete Genomics平台，配套的试剂盒为胎儿染色体非整倍体（T21、T18、T13）检测试剂盒（联合探针锚定连接测序法）。CG平台的特点是通量高，但周期较长，因此BGISEQ-1000应该主要会应用于全国范围内的样品，集中测序分析；</p>

<p>BGISEQ-100基因测序仪基于Ion Torrent平台，配套的试剂盒为胎儿染色体非整倍体（T21、T18、T13）检测试剂盒（半导体测序法）。Ion Torrent平台的特点是测序周期短，可灵活部署，BGISEQ-100有很大可能会被部署到有一定业务量的大中型医院，就地采样、测序、分析并出具报告.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Online 'Statistical Learning' Course Starts Jan 21 2014]]></title>
    <link href="http://bioops.info/2014/01/stat-learning-starts/"/>
    <updated>2014-01-20T10:30:00+00:00</updated>
    <id>http://bioops.info/2014/01/stat-learning-starts</id>
    <content type="html"><![CDATA[<p>The free online course <a href="https://class.stanford.edu/courses/HumanitiesScience/StatLearning/Winter2014/about">Statistical Learning</a> will start tomorrow. It will be taught by Rob Tibshirani and Trevor Hastie. It is an excellent opportunity to learn directly from the two famous professors in the field and the authors of two great textbooks on statistical learning, <a href="http://www-bcf.usc.edu/~gareth/ISL/">An Introduction to Statistical Learning, with Applications in R</a> and <a href="http://statweb.stanford.edu/~tibs/ElemStatLearn/">The Elements of Statistical Learning</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[八卦]]></title>
    <link href="http://bioops.info/2013/09/gossip/"/>
    <updated>2013-09-17T12:48:00+00:00</updated>
    <id>http://bioops.info/2013/09/gossip</id>
    <content type="html"><![CDATA[<p><a href="http://www.biostat.washington.edu/~dwitten/">Daniela Witten</a>，26岁当上assistant professor，被福布斯评为科学界30个30岁以下的牛人<a href="http://www.forbes.com/special-report/2011/30-under30-12/30-under-30-12_science.html">之一</a>。<a href="http://en.wikipedia.org/wiki/Edward_Witten">父</a><a href="http://en.wikipedia.org/wiki/Chiara_Nappi">母</a>都是普林斯顿的professor，<a href="http://psych.princeton.edu/psychology/research/witten/index.php">姐姐</a>是普林斯顿的assistant professor，她爸得过菲尔兹奖，<a href="http://www.nytimes.com/2008/08/17/fashion/weddings/17WITTEN.html">老公</a>是facebook的元老。</p>

<p>总结：科研是聪明且有钱人的游戏。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lasso Related Links]]></title>
    <link href="http://bioops.info/2013/08/lasso-related-links/"/>
    <updated>2013-08-17T20:18:00+00:00</updated>
    <id>http://bioops.info/2013/08/lasso-related-links</id>
    <content type="html"><![CDATA[<p><a href="http://www-stat.stanford.edu/~tibs/lasso.html">The Lasso Page</a> is maintained by the inventor of lasso and provides most important references for lasso.</p>

<p>The book <em>Elements of Statistical Learning</em> (<a href="http://www-stat.stanford.edu/~tibs/ElemStatLearn/index.html">pdf</a>) describes the lasso in detail.</p>

<p>Lasso in R: <a href="http://cran.r-project.org/web/packages/lars/index.html">lars</a>: Least Angle Regression, Lasso and Forward Stagewise, and <a href="http://cran.r-project.org/web/packages/glmnet/index.html">glmnet</a>: Lasso and elastic-net regularized generalized linear models (Note: lars() function from the lars package is probably much slower than glmnet() from glmnet.)</p>

<p><a href="http://pages.cs.wisc.edu/~shao/stat992/zou2006.pdf">The adaptive lasso paper</a></p>

<p><a href="http://www4.stat.ncsu.edu/~boos/var.select/lasso.adaptive.html">Adaptive lasso in R</a><br />
adaptive.lasso function in <a href="http://cran.r-project.org/web/packages/lqa/">lqa</a> package (Penalized Likelihood Inference for GLMs)<br />
adalasso function in <a href="http://www.cran.r-project.org/web/packages/parcor/">parcor</a> package (Regularized estimation of partial correlation matrices)</p>

<p><a href="http://www-stat.stanford.edu/~tibs/ftp/glasso-bio.pdf">The graphical lasso paper</a></p>

<p><a href="http://cran.r-project.org/web/packages/glasso/">Graphical lasso in R</a> (glasso: Graphical lasso- estimation of Gaussian graphical models)</p>

<p><a href="http://arxiv.org/abs/1111.0324">The joint graphical lasso paper</a></p>

<p><a href="http://cran.r-project.org/web/packages/JGL/index.html">Joint graphical lasso in R</a> (JGL: Performs the Joint Graphical Lasso for sparse inverse covariance estimation on multiple classes)</p>

<p><a href="http://arxiv.org/abs/1009.2300">The Bayesian adaptive lasso paper</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R Function of Monte Carlo Simulation to Get the P-value From the Joint Cumulative Distribution of an N-dimensional Order Statistic]]></title>
    <link href="http://bioops.info/2013/08/p-value-order-statistics/"/>
    <updated>2013-08-08T21:21:00+00:00</updated>
    <id>http://bioops.info/2013/08/p-value-order-statistics</id>
    <content type="html"><![CDATA[<p>I want to compute the P-value from the joint cumulative distribution of an
n-dimensional <a href="http://en.wikipedia.org/wiki/Order_statistic">order statistic</a>.</p>

<script type="math/tex; mode=display">P(r_1 r_2 ,..., r_n)=n! \int\limits_0^{r_1} \int\limits_{s_1}^{r_2} ... \int\limits_{s_{n-1}}^{r_n} ds_1ds_2...ds_n</script>

<p>One efficient way is using the following recursive formula.</p>

<script type="math/tex; mode=display">P(r_1 r_2 ,..., r_n)=\sum_{i=1}^{n} (r_{n-i+1}-r_{n-i}) P(r_i r_2 ,..., r_{n-i},r_{n-i+2} ,..., r_n)</script>

<p><strong>However, the facts are (or would be):</strong></p>

<ol>
  <li>I am too stupid to write a recursive function.</li>
  <li>I didn’t find the efficient formula at first.</li>
  <li>In other cases, the efficient formula have not been derived yet, or too complicated to derive.</li>
</ol>

<p>In Statistics <a href="http://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo simulation</a> is a “quick” way to compute some complicated formulas. By saying “quick”, I mean I can see the results without knowing or deriving “ugly” Math formulas. It’s actually a very “slow” method in computing aspect.</p>

<p>Anyway, the R function is here.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>P_order_stat.R</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1"># sub function of monte carlo simulation to get the p-value</span>
</span><span class="line">P_order_stat <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>ranks<span class="p">)</span> <span class="p">{</span>
</span><span class="line">  NumRep <span class="o">&lt;-</span> <span class="m">10000</span> <span class="c1"># number of replicates</span>
</span><span class="line">  newvec <span class="o">&lt;-</span> <span class="kp">sort</span><span class="p">(</span>ranks<span class="p">)</span> <span class="c1"># sort the rank ratios</span>
</span><span class="line">  pvalue <span class="o">&lt;-</span> <span class="m">0</span> <span class="c1"># inital pvalue</span>
</span><span class="line">  <span class="kr">for</span> <span class="p">(</span>i <span class="kr">in</span> <span class="m">1</span><span class="o">:</span>NumRep<span class="p">){</span>
</span><span class="line">
</span><span class="line">      <span class="c1"># generate random uniform distributed data,</span>
</span><span class="line">      <span class="c1"># and then sort the simulated rank ratios</span>
</span><span class="line">      newx <span class="o">&lt;-</span> <span class="kp">sort</span><span class="p">(</span>runif<span class="p">(</span><span class="kp">length</span><span class="p">(</span>ranks<span class="p">),</span> min<span class="o">=</span><span class="m">0</span><span class="p">,</span> max<span class="o">=</span><span class="m">1</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">      <span class="c1"># if all the simulated data is lower than the input,</span>
</span><span class="line">      <span class="c1"># then sucess+1</span>
</span><span class="line">      judge <span class="o">&lt;-</span> <span class="kp">sum</span><span class="p">(</span>newvec <span class="o">&gt;=</span> newx<span class="p">)</span>
</span><span class="line">      <span class="kr">if</span> <span class="p">(</span>judge <span class="o">==</span> <span class="kp">length</span><span class="p">(</span>ranks<span class="p">))</span> pvalue<span class="o">&lt;-</span>pvalue<span class="m">+1</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  pvalue <span class="o">&lt;-</span> pvalue <span class="o">/</span> NumRep  <span class="c1"># get the p-value</span>
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>pvalue<span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simulate Multivariate Normal Distribution Using R]]></title>
    <link href="http://bioops.info/2013/08/simulate-multivariate-normal/"/>
    <updated>2013-08-08T20:38:00+00:00</updated>
    <id>http://bioops.info/2013/08/simulate-multivariate-normal</id>
    <content type="html"><![CDATA[<p>I have been doing some research about co-expression network. “co-expression” means that genes have similar expression profiles across different conditions or tissues. In the network, genes are nodes, and “co-expression” relationship between two genes can be reprensented as edges. The co-expressed genes may involve in similar pathways or biological process.</p>

<p>In a small part of my research, I am testing some algorithms to detect co-expression relationship. One way to test algorithm is simulation. In an ideal (simple) case, the expression values of two co-expressed genes can be considered as bivariate normal distributed. To generate expression values of such gene pair or a group of genes given a correlation coefficient, is just to simulate multivariate normal distribution. <a href="http://cran.r-project.org/web/packages/MASS/index.html">MASS</a> library in R has an function, <a href="http://stat.ethz.ch/R-manual/R-patched/library/MASS/html/mvrnorm.html">mvrnorm</a>, to do that, but it requires a covariance matrix.</p>

<p>The function below is to firstly generate the covariance matrix in order to use the mvnorm function. Because we only know the correlation coefficient, i.e. co-expression relationship (degree), the mean and variance of each gene’s expression profile are random generated in the function. Then the matrix can be calulated as follows.</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\mu=\left( 
\begin{matrix}
  \mu_x \\
  \mu_y
 \end{matrix}
\right), \Sigma=\left( 
\begin{matrix}
  \sigma_x^2 & \rho \sigma_x \sigma_y \\
  \sigma_x \sigma_y & \sigma_y^2
 \end{matrix}
\right) %]]&gt;</script>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>multi_norm.R</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1"># function to simulate multivariate normal distribution</span>
</span><span class="line"><span class="c1"># given gene number, sample size and correlation coefficient</span>
</span><span class="line">multi_norm <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>gene_num<span class="p">,</span>sample_num<span class="p">,</span>R<span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="c1"># initial covariance matrix</span>
</span><span class="line">  V <span class="o">&lt;-</span> <span class="kt">matrix</span><span class="p">(</span>data<span class="o">=</span><span class="kc">NA</span><span class="p">,</span> nrow<span class="o">=</span>gene_num<span class="p">,</span> ncol<span class="o">=</span>gene_num<span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># mean for each gene</span>
</span><span class="line">  meansmodule <span class="o">&lt;-</span> runif<span class="p">(</span>gene_num<span class="p">,</span> min<span class="o">=</span><span class="m">-3</span><span class="p">,</span> max<span class="o">=</span><span class="m">3</span><span class="p">)</span>
</span><span class="line">  <span class="c1"># variance for each gene</span>
</span><span class="line">  varsmodule <span class="o">&lt;-</span> runif<span class="p">(</span>gene_num<span class="p">,</span> min<span class="o">=</span><span class="m">0</span><span class="p">,</span> max<span class="o">=</span><span class="m">5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="kr">for</span> <span class="p">(</span>i <span class="kr">in</span> <span class="m">1</span><span class="o">:</span>gene_num<span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="c1"># a two-level nested loop to generate covariance matrix</span>
</span><span class="line">    <span class="kr">for</span> <span class="p">(</span>j <span class="kr">in</span> <span class="m">1</span><span class="o">:</span>gene_num<span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="kr">if</span> <span class="p">(</span>i <span class="o">==</span> j<span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1"># covariances on the diagonal</span>
</span><span class="line">        V<span class="p">[</span>i<span class="p">,</span>j<span class="p">]</span> <span class="o">&lt;-</span> varsmodule<span class="p">[</span>i<span class="p">]</span>
</span><span class="line">      <span class="p">}</span> <span class="kr">else</span> <span class="p">{</span>
</span><span class="line">        <span class="c1"># covariances</span>
</span><span class="line">        V<span class="p">[</span>i<span class="p">,</span>j<span class="p">]</span> <span class="o">&lt;-</span> R <span class="o">*</span> <span class="kp">sqrt</span><span class="p">(</span>varsmodule<span class="p">[</span>i<span class="p">])</span> <span class="o">*</span> <span class="kp">sqrt</span><span class="p">(</span>varsmodule<span class="p">[</span>j<span class="p">])</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># simulate multivariate normal distribution</span>
</span><span class="line">  <span class="c1"># given means and covariance matrix</span>
</span><span class="line">  X <span class="o">&lt;-</span> <span class="kp">t</span><span class="p">(</span>mvrnorm<span class="p">(</span>n <span class="o">=</span> sample_num<span class="p">,</span> meansmodule<span class="p">,</span> V<span class="p">))</span>
</span><span class="line">
</span><span class="line">  <span class="kr">return</span><span class="p">(</span>X<span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Warning]]></title>
    <link href="http://bioops.info/2013/08/warning/"/>
    <updated>2013-08-07T14:19:00+00:00</updated>
    <id>http://bioops.info/2013/08/warning</id>
    <content type="html"><![CDATA[<p>A couple of months ago, I transfered the website engine from wordpress into Octopress. A lot of errors were found in previous posts due to format incompatibility, especially some perl scripts.</p>

<p>Please read carefully before using any code or script, and leave a comment if you find some “terrible” error.</p>

<p>Thank you!</p>

<p>[update-2013-08-08] now only perl howto related posts</p>

<p>[update-2015-01-01] All format issues are (putatively) resolved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Final Transfer to Github]]></title>
    <link href="http://bioops.info/2013/05/final-transfer-to-github/"/>
    <updated>2013-05-24T22:14:00+00:00</updated>
    <id>http://bioops.info/2013/05/final-transfer-to-github</id>
    <content type="html"><![CDATA[<p>I had been using 000webhost.com to host my website till several days ago when I noticed my website was suspendend for “violating 20%+ CPU usage limit for more than 1000 times.”</p>

<p>The 000wbehost server is good and stable. Most importantly it’s free. Now, I have to transfter to another free and good web hosting service. Github is a good choice. But github does not support wordpress. I tried to transferr the website to github <a href="http://bioops.info/2012/07/transfering-to-github/">before</a>, but I am not comfortable to write blogs using Markdown.</p>

<p>It’s difficult to find another free service supporting wordpress, and lots of people said the static blogging engine is much better than wordpress. Looks like I will stay here for a while.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Job Requirements for Senior/mid-senior Bioinformatician and Computational Biologist]]></title>
    <link href="http://bioops.info/2013/04/job-requirements-for-bioinformatician/"/>
    <updated>2013-04-18T00:00:00+00:00</updated>
    <id>http://bioops.info/2013/04/job-requirements-for-bioinformatician</id>
    <content type="html"><![CDATA[<p><ul>
	<li>Degree: Phd (=MS+“n” years experience)</li>
	<li>NGS data processing experience</li>
	<li>Biology + Statistics knowledge</li>
	<li>Programming: Statistics (R/Matlab/SAS), Script language (Python/Perl), OOP (C++/Java), Database (SQL)</li>
	<li>Linux/Unix</li>
	<li>Written and oral communication skills</li>
</ul>
(Note: Based on an incomplete and unprofessional survey on US job market in April 2013)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NGS Startups]]></title>
    <link href="http://bioops.info/2013/03/ngs-startups/"/>
    <updated>2013-03-26T00:00:00+00:00</updated>
    <id>http://bioops.info/2013/03/ngs-startups</id>
    <content type="html"><![CDATA[<p><h1><a href="https://www.23andme.com/" target="_blank">23andme</a></h1>
<h3><a href="http://en.wikipedia.org/wiki/23andMe" target="_blank">Wiki</a>:</h3>
23andMe is a privately held personal genomics and biotechnology company based in Mountain View, California that provides rapid genetic testing. The company is named for the 23 pairs of chromosomes in a normal human cell. Their personal genome test kit was named &#8220;Invention of the Year&#8221; by <em>Time</em> magazine in 2008.
<h3><a href="https://www.23andme.com/about/jobs/" target="_blank">Jobs</a>:</h3>
<strong>Engineering:</strong>
HPC Systems Administrator<br />
Senior Software Engineer<br />
Software Engineer<br />
Storage Systems Architect/Engineer
<strong>Science:</strong>
Backend Software Engineer<br />
Health Content Scientist<br />
Research Assistant<br />
Scientist<br />
Statistical Geneticist<br />
Statistical Geneticist focusing on Parkinson&#8217;s Disease<br />
Survey Methodologist<br />
User Interface Designer
<h1><a href="http://www.binatechnologies.com/" target="_blank">Bina</a></h1>
<h3><a href="http://www.binatechnologies.com/company" target="_blank">About</a>:</h3>
Bina is the big data science platform accelerating personalized medicine for researchers and clinicians requiring fast, accurate and scalable genomic analysis. The word &#8220;Bina&#8221; means &#8220;knowledge&#8221; or &#8220;insight&#8221;, translated from both Persian and Hebrew. We use cutting-edge big data technologies to dramatically reduce the amount of time and money required to process raw genetic data in order to generate insights for personalized medicine. Bina was started by a team of Stanford and Berkeley researchers and entrepreneurs, with the vision that whole genome sequencing (WGS) is just the beginning of a brighter future. Bina is accelerating personalized medicine, one genome at a time.
<h3><a href="http://www.binatechnologies.com/company/joinus" target="_blank">Jobs:</a></h3>
Big Data Software Architect<br />
Senior Software Engineer<br />
Senior Computational Biologist<br />
Senior Data Scientist<br />
Senior Applications Support Scientist<br />
Senior Bioinformatics Scientist</p>

<p><a href="http://techcrunch.com/2013/03/25/with-6-5m-in-tow-bina-technologies-wants-to-bring-big-data-insight-to-genomic-sequencing/" target="_blank">TechCrunch: With $6.25M In Tow, Bina Technologies Wants To Bring Big Data Insight To Genomic Sequencing</a></p>

<p><strong><em>(to be continued)</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sequencing Cost (2013 Feb)]]></title>
    <link href="http://bioops.info/2013/02/sequencing-cost/"/>
    <updated>2013-02-20T00:00:00+00:00</updated>
    <id>http://bioops.info/2013/02/sequencing-cost</id>
    <content type="html"><![CDATA[<p><div><section>
<h2><a href="http://www.nature.com/news/gene-sequencing-leaves-the-laboratory-1.12454" target="_blank">Reasonably priced genomes</a></h2>
<section></section><section>Although no reports of big innovations in DNA sequencing are expected at a major conference this week, the current cost and capabilities of the technology now make medical applications worthwhile.</section>
<table>
<thead>
<tr>
<th scope="col">Name</th>
<th scope="col">Machine cost</th>
<th scope="col">Read length (bases)</th>
<th scope="col">Cost per megabase</th>
</tr>
</thead>
<tbody>
<tr>
<td>Illumina MiSeq</td>
<td>US$125,000</td>
<td>500</td>
<td>14–70 cents</td>
</tr>
<tr>
<td>Illumina HiSeq</td>
<td>US$690,000</td>
<td>300</td>
<td>4–5 cents</td>
</tr>
<tr>
<td>PacBio RS</td>
<td>US$695,000</td>
<td>4,575</td>
<td>$2–17</td>
</tr>
<tr>
<td>Ion Torrent PGM</td>
<td>US$49,000</td>
<td>400</td>
<td>60 cents–$5</td>
</tr>
<tr>
<td>Ion Torrent Proton</td>
<td>US$224,000</td>
<td>200</td>
<td>1–9 cents</td>
</tr>
</tbody>
</table>
Source: The companies; Travis Glenn</section></div></p>

<p>
<div></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世界末日]]></title>
    <link href="http://bioops.info/2012/11/the-end-of-the-world/"/>
    <updated>2012-11-30T00:00:00+00:00</updated>
    <id>http://bioops.info/2012/11/the-end-of-the-world</id>
    <content type="html"><![CDATA[<p>我特别希望世界末日是真的！<br />
。。。。。。<br />
看评论。</p>
]]></content>
  </entry>
  
</feed>
